Description: >
    Vignesh Prabhu - Udacity Cloud DevOps Nanodegree Capstone Project

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resources
        Type: String

    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this
        Type: String
        Default: 10.0.0.0/16

    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the Subnet
        Type: String
        Default: 10.0.0.0/24

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the Subnet
        Type: String
        Default: 10.0.1.0/24

    BootstrapArguments:
        Type: String
        Default: ""
        Description: "Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami"

    ClusterName:
        Type: String
        Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.

    NodeAutoScalingGroupDesiredCapacity:
        Type: Number
        Default: 3
        Description: Desired capacity of Node Group ASG.

    NodeAutoScalingGroupMaxSize:
        Type: Number
        Default: 4
        Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.

    NodeAutoScalingGroupMinSize:
        Type: Number
        Default: 2
        Description: Minimum size of Node Group ASG.

    NodeGroupName:
        Type: String
        Description: Unique identifier for the Node Group.

    NodeImageId:
        Type: String
        Default: ""
        Description: (Optional) Specify your own custom image ID. This value overrides any AWS Systems Manager Parameter Store value specified above.

    NodeImageIdSSMParam:
        Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
        Default: /aws/service/eks/optimized-ami/1.14/amazon-linux-2/recommended/image_id
        Description: AWS Systems Manager Parameter Store parameter of the AMI ID for the worker node instances.

    NodeInstanceType:
        Type: String
        AllowedValues: [t2.medium, t3.small, t3.nano, t3.micro, t3.medium]

    NodeVolumeSize:
        Type: Number
        Default: 20
        Description: Node volume size


Conditions:
    HasNodeImageId: !Not
        - "Fn::Equals":
              - Ref: NodeImageId
              - ""

Resources:

    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    InternetGateway:
        Type: AWS::EC2::InternetGateway

    InternetGatewayAttachment:
        Type:  AWS::EC2::VPCGatewayAttachment
        Properties:
            VpcId: !Ref VPC
            InternetGatewayId: !Ref InternetGateway

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2

    ClusterControlPlaneSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http and ssh to our infrastructure
            VpcId: !Ref VPC
            SecurityGroupIngress:
                -   IpProtocol: tcp
                    FromPort: 0
                    ToPort: 65535
                    CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
                -   IpProtocol: tcp
                    FromPort: 0
                    ToPort: 65535
                    CidrIp: 0.0.0.0/0

    EKSCluster:
        Type: AWS::EKS::Cluster
        Properties:
            Name: !Ref ClusterName
            Version: '1.14'
            RoleArn: arn:aws:iam::093865488325:role/awsEKSRole
            ResourcesVpcConfig:
                SecurityGroupIds:
                    -   !Ref ClusterControlPlaneSecurityGroup
                SubnetIds:
                    -   !Ref PublicSubnet1
                    -   !Ref PublicSubnet2

    NodeInstanceRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName:
              !Sub ${EnvironmentName}-Role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service:
                                - ec2.amazonaws.com
                        Action:
                            - "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
                - "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
                - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
            Path: /

    NodeInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                -   Ref: NodeInstanceRole

    NodeSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Security group for all nodes in the cluster
            Tags:
                -   Key: !Sub kubernetes.io/cluster/${ClusterName}
                    Value: owned
            VpcId: !Ref VPC


    NodeSecurityGroupIngress:
        Type: AWS::EC2::SecurityGroupIngress
        DependsOn: NodeSecurityGroup
        Properties:
            Description: Allow node to communicate with each other
            FromPort: 0
            GroupId: !Ref NodeSecurityGroup
            IpProtocol: "-1"
            SourceSecurityGroupId: !Ref NodeSecurityGroup
            ToPort: 65535

    ClusterControlPlaneSecurityGroupIngress:
        Type: AWS::EC2::SecurityGroupIngress
        DependsOn: NodeSecurityGroup
        Properties:
            Description: Allow pods to communicate with the cluster API Server
            FromPort: 443
            GroupId: !Ref ClusterControlPlaneSecurityGroup
            IpProtocol: tcp
            SourceSecurityGroupId: !Ref NodeSecurityGroup
            ToPort: 443

    ControlPlaneEgressToNodeSecurityGroup:
        Type: AWS::EC2::SecurityGroupEgress
        DependsOn: NodeSecurityGroup
        Properties:
            Description: Allow the cluster control plane to communicate with worker Kubelet and pods
            DestinationSecurityGroupId: !Ref NodeSecurityGroup
            FromPort: 1025
            GroupId: !Ref ClusterControlPlaneSecurityGroup
            IpProtocol: tcp
            ToPort: 65535

    ControlPlaneEgressToNodeSecurityGroupOn443:
        Type: AWS::EC2::SecurityGroupEgress
        DependsOn: NodeSecurityGroup
        Properties:
            Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
            DestinationSecurityGroupId: !Ref NodeSecurityGroup
            FromPort: 443
            GroupId: !Ref ClusterControlPlaneSecurityGroup
            IpProtocol: tcp
            ToPort: 443

    NodeSecurityGroupFromControlPlaneIngress:
        Type: AWS::EC2::SecurityGroupIngress
        DependsOn: NodeSecurityGroup
        Properties:
            Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
            FromPort: 1025
            GroupId: !Ref NodeSecurityGroup
            IpProtocol: tcp
            SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
            ToPort: 65535

    NodeSecurityGroupFromControlPlaneOn443Ingress:
        Type: AWS::EC2::SecurityGroupIngress
        DependsOn: NodeSecurityGroup
        Properties:
            Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
            FromPort: 443
            GroupId: !Ref NodeSecurityGroup
            IpProtocol: tcp
            SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
            ToPort: 443

    NodeLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            AssociatePublicIpAddress: "true"
            BlockDeviceMappings:
                -   DeviceName: /dev/xvda
                    Ebs:
                        DeleteOnTermination: true
                        VolumeSize: !Ref NodeVolumeSize
                        VolumeType: gp2
            IamInstanceProfile: !Ref NodeInstanceProfile
            ImageId: !If
                - HasNodeImageId
                -   Ref: NodeImageId
                -   Ref: NodeImageIdSSMParam
            InstanceType: !Ref NodeInstanceType
            SecurityGroups:
                -   Ref: NodeSecurityGroup
            UserData: !Base64
                "Fn::Sub": |
                    #!/bin/bash
                    set -o xtrace
                    /etc/eks/bootstrap.sh ${ClusterName}
                    /opt/aws/bin/cfn-signal --exit-code $? \
                             --stack  ${AWS::StackName} \
                             --resource NodeGroup  \
                             --region ${AWS::Region}

    NodeAutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            DesiredCapacity: !Ref NodeAutoScalingGroupDesiredCapacity
            LaunchConfigurationName: !Ref NodeLaunchConfig
            MaxSize: !Ref NodeAutoScalingGroupMaxSize
            MinSize: !Ref NodeAutoScalingGroupMinSize
            Tags:
                -   Key: Name
                    PropagateAtLaunch: "true"
                    Value: !Sub ${ClusterName}-${NodeGroupName}-Node
                -   Key: !Sub kubernetes.io/cluster/${ClusterName}
                    PropagateAtLaunch: "true"
                    Value: owned
            VPCZoneIdentifier:
                - !Ref PublicSubnet1
                - !Ref PublicSubnet2
        UpdatePolicy:
            AutoScalingRollingUpdate:
                MaxBatchSize: "1"
                MinInstancesInService: !Ref NodeAutoScalingGroupDesiredCapacity
                PauseTime: PT5M

Outputs:

    VPC:
        Description: A reference to the created VPC
        Value: !Ref VPC
        Export:
            Name: !Sub ${EnvironmentName}-VPCID
